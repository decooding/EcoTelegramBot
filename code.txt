
#######################bk.py################################################################

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

Main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ["‚ôªÔ∏è –£–∑–Ω–∞—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä –æ—Ç—Ö–æ–¥–æ–≤", "üî¢ –ö–æ–¥—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏"]
Main_keyboard.add(*buttons)
Main_keyboard.add(KeyboardButton(text="‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º")).add(
    KeyboardButton(text="üåÄ –£–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞")
)
Main_keyboard.add(KeyboardButton(text="üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"))

Main_keyboard.add(KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã"))
Color_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ["üü¶", "üü©", "üü•", "üü®", "üü™", "‚¨ú"]
Color_keyboard.add(*buttons).add(KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

Digit_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£"]
Digit_keyboard.add(*buttons).add(KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))


#######################main.py################################################################
import requests, logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from kb import Main_keyboard, Color_keyboard, Digit_keyboard
from aiogram.dispatcher import Dispatcher

API_TOKEN = "6232142718:AAGtjHPrJJPfAWGztHk-RzwKiTeMWHH4xFc"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=Main_keyboard,
    )
    await message.delete()


@dp.message_handler(lambda message: message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_menu(message: types.Message):
    await message.answer("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=Main_keyboard)
    await message.delete()


color_map = {
    "üü¶": {"name": "–°—Ç–µ–∫–ª–æ", "image": "color_img/2.jpeg"},
    "üü©": {"name": "–û—Ä–≥–∞–Ω–∏–∫–∞", "image": "color_img/6.jpeg"},
    "üü•": {"name": "–ü–ª–∞—Å—Ç–∏–∫", "image": "color_img/5.jpeg"},
    "üü®": {"name": "–ë—É–º–∞–≥–∞", "image": "color_img/4.jpeg"},
    "üü™": {"name": "–ú–µ—Ç–∞–ª–ª", "image": "color_img/1.jpeg"},
    "‚¨ú": {"name": "–ë–∞—Ç–∞—Ä–µ–π–∫–∏", "image": "color_img/3.jpeg"},
}


@dp.message_handler(lambda message: message.text == "‚ôªÔ∏è –£–∑–Ω–∞—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä –æ—Ç—Ö–æ–¥–æ–≤")
async def Marker(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —É—Ä–Ω—ã", reply_markup=Color_keyboard)
    await message.delete()


@dp.message_handler(lambda message: message.text in color_map.keys())
async def handle_color(message: types.Message):
    chat_id = message.chat.id

    color = color_map[message.text]
    image_path = color["image"]
    name = color["name"]
    await bot.send_photo(chat_id=chat_id, photo=open(image_path, "rb"))
    await bot.send_message(chat_id=chat_id, text=name)
    await message.delete()


@dp.message_handler(lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã")
async def Marker(message: types.Message):
    advice_list = [
        "1.–°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º—É—Å–æ—Ä, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å",
        "2.–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã",
        "3.–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –µ–∑–¥–∏—Ç–µ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ",
        "4.–°–∞–∂–∞–π—Ç–µ –¥–µ—Ä–µ–≤—å—è –∏ —Ü–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–µ–º —É—á–∞—Å—Ç–∫–µ",
        "5.–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å—É–º–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫",
    ]
    await message.answer("\n".join(advice_list))
    await message.delete()


@dp.message_handler(lambda message: message.text == "‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º")
async def send_random_value(message: types.Message):
    response = f'–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏, —É–∫–∞–∑–∞–≤ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–ø–∏—Å–∞–≤ –≤ –Ω–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ö –ø—Ä–∏–º–µ—Ä—É: " /q –ú–æ–∂–µ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –º—É—Å–æ—Ä?"'
    await message.answer(response)
    await message.delete()


@dp.message_handler(commands=["q"])
async def send_q_expert(message: types.Message):
    command, question = message.text.split(maxsplit=1)
    response = f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {f'@{message.from_user.username}' or message.from_user.id}: {question}"
    await bot.send_message("@ecologisticsexpert", response)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")


digit_map = {
    "1Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω —Ç–µ—Ä–µ—Ñ—Ç–∞–ª–∞—Ç–∞ (PET) - —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –±—É—Ç—ã–ª–æ–∫ –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤, —É–ø–∞–∫–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤–æ–ª–æ–∫–æ–Ω –¥–ª—è –æ–¥–µ–∂–¥—ã –∏ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∏–ª—è. ",
        "image": "digit_img/1.jpeg",
    },
    "2Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω –≤—ã—Å–æ–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–ü–í–•) - —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –±—É—Ç—ã–ª–æ–∫ –¥–ª—è –º–æ–ª–æ–∫–∞, –≤–æ–¥—ã, —Å–æ–∫–∞, –∞ —Ç–∞–∫–∂–µ –≤ —É–ø–∞–∫–æ–≤–∫–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤, –±—ã—Ç–æ–≤–æ–π —Ö–∏–º–∏–∏ –∏ –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
        "image": "digit_img/2.jpeg",
    },
    "3Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏–≤–∏–Ω–∏–ª—Ö–ª–æ—Ä–∏–¥ (PVC) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –æ–∫–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π, —Ç—Ä—É–±, –∫–∞–±–µ–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π, –ø–ª–µ–Ω–æ–∫ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏, —Å—É–º–æ–∫, –æ–±—É–≤–∏, –º–µ–±–µ–ª–∏, —Å—Ç–µ–Ω–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π, –∫–∞—Ä–∫–∞—Å–æ–≤ –¥–ª—è –∑–æ–Ω—Ç–∏–∫–æ–≤ –∏ –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
        "image": "digit_img/3.jpeg",
    },
    "4Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω –Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–ü–ù–î) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –ø–∏—â–µ–≤—ã—Ö –ø–ª–µ–Ω–æ–∫, –º–µ—à–∫–æ–≤ –¥–ª—è –º—É—Å–æ—Ä–∞, –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã, –∏–≥—Ä—É—à–µ–∫ –∏ —Ç.–¥.",
        "image": "digit_img/4.jpeg",
    },
    "5Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω (PP) - —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —É–ø–∞–∫–æ–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –ø–∏—â–µ–≤—ã—Ö –∫–æ—Ä–æ–±–æ–∫, –ø–∞–∫–µ—Ç–æ–≤, –∫—Ä—ã—à–µ–∫, –∫—Ä—ã—à–µ–∫ –¥–ª—è –±—É—Ç—ã–ª–æ–∫, –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –±—É—Ç—ã–ª–æ–∫, –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏ —Ç.–¥.",
        "image": "digit_img/5.jpeg",
    },
    "6Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏—Å—Ç–∏—Ä–æ–ª (PS) - —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π, –≤–∫–ª—é—á–∞—è –ø–∏—â–µ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —Å—Ç–∞–∫–∞–Ω—ã, –∫—Ä—ã—à–∫–∏ –¥–ª—è —Å—Ç–∞–∫–∞–Ω–æ–≤, –∏–≥—Ä—É—à–∫–∏, —É–ø–∞–∫–æ–≤–∫–∏, –∏–∑–¥–µ–ª–∏—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã, –±—ã—Ç–æ–≤—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.",
        "image": "digit_img/6.jpeg",
    },
    "7Ô∏è‚É£": {
        "description": "–ê–∫—Ä–∏–ª–æ–Ω–∏—Ç—Ä–∏–ª-–±—É—Ç–∞–¥–∏–µ–Ω-—Å—Ç–∏—Ä–æ–ª (ABS) - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏, –±—ã—Ç–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤, –∏–≥—Ä—É—à–µ–∫, –º–µ–±–µ–ª–∏, –±—É—Ç—ã–ª–æ–∫ –∏ –ø—Ä–æ—á–∏—Ö –∏–∑–¥–µ–ª–∏–π.",
        "image": "digit_img/7.jpeg",
    },
}


@dp.message_handler(lambda message: message.text == "üî¢ –ö–æ–¥—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏")
async def send_random_value(message: types.Message):
    text = (
        "‚ôªÔ∏è –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–¥—ã. "
        "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3-—Ö —Å—Ç—Ä–µ–ª–æ–∫ –≤ —Ñ–æ—Ä–º–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∞—è —Ç–∏–ø –ø–ª–∞—Å—Ç–∏–∫–∞."
    )
    await message.answer(text, reply_markup=Digit_keyboard)
    await message.delete()


@dp.message_handler(lambda message: message.text in digit_map.keys())
async def handle_digit(message: types.Message):
    chat_id = message.chat.id

    digit = digit_map[message.text]
    image_path = digit["image"]
    description = digit["description"]
    await bot.send_photo(chat_id=chat_id, photo=open(image_path, "rb"))
    await bot.send_message(chat_id=chat_id, text=description)
    await message.delete()


API_QA = "7e9f1b481689e9bb85a2119fe75ec481119a9ced"


def get_air_quality(city):
    url = f"https://api.waqi.info/feed/{city}/?token={API_QA}"
    response = requests.get(url)
    data = response.json()
    if response.status_code == 200:
        aqi = data["data"]["aqi"]
        dominant_pollutant = data["data"]["dominentpol"]
        if aqi <= 50:
            message = f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} —Ö–æ—Ä–æ—à–µ–µ (AQI {aqi}). –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–∏–º –¥–Ω–µ–º!"
        elif aqi <= 100:
            message = f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} —É–º–µ—Ä–µ–Ω–Ω–æ–µ (AQI {aqi}). –ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ."
        elif aqi <= 150:
            message = f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–ª—è –≥—Ä—É–ø–ø –ª—é–¥–µ–π —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (AQI {aqi}). –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞ —É–ª–∏—Ü–µ."
        elif aqi <= 200:
            message = f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ (AQI {aqi}). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏."
        elif aqi <= 300:
            message = f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} –æ—á–µ–Ω—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ (AQI {aqi}). –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –ª—é–±—ã—Ö —É–ª–∏—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π."
        else:
            message = f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} –æ–ø–∞—Å–Ω–æ–µ (AQI {aqi}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏."
            message += f"\n\n–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–º –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª–µ–º —è–≤–ª—è–µ—Ç—Å—è {dominant_pollutant}."
    else:
        message = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}."
    return message


@dp.message_handler(lambda message: message.text == "üåÄ –£–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞")
async def msg_air_quality(message: types.Message):
    response_message = (
        "–í–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /air Astana"
    )
    await message.answer(response_message)


@dp.message_handler(commands=["air"])
async def cmd_air_quality(message: types.Message):
    if len(message.text.split()) > 1:
        city = message.text.split(maxsplit=1)[1]
        response_message = get_air_quality(city)
        await message.answer(response_message)
    else:
        response_message = "–ù–µ–≤–µ—Ä–Ω–∞ –≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. \n–ù–∞–ø—Ä–∏–º–µ—Ä: /air Astana"
        await message.answer(response_message)


subscribers = []


@dp.message_handler(lambda message: message.text == "üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
async def subscribe(message: types.Message):
    if message.from_user.id not in subscribers:
        subscribers.append(message.from_user.id)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
    else:
        subscribers.remove(message.from_user.id)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await message.delete()


async def send_to_subscribers(message: str):
    for subscriber in subscribers:
        try:
            await bot.send_message(subscriber, message)
        except:
            pass


@dp.message_handler(commands=["all"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    command, message.text = message.text.split(maxsplit=1)

    await bot.send_message(chat_id=user_id, text=message.text)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
