import logging
import requests
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from kb import Main_keyboard, Color_keyboard, Digit_keyboard
from aiogram.dispatcher import Dispatcher

API_TOKEN = "6232142718:AAGtjHPrJJPfAWGztHk-RzwKiTeMWHH4xFc"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=Main_keyboard,
    )
    await message.delete()


@dp.message_handler(lambda message: message.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_menu(message: types.Message):
    await message.answer("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=Main_keyboard)
    await message.delete()


color_map = {"üü¶": "–ë—É–º–∞–≥–∞", "üü©": "–°—Ç–µ–∫–ª–æ", "üüß": "–ü–ª–∞—Å—Ç–∏–∫", "üü®": "–ú–µ—Ç–∞–ª–ª"}


@dp.message_handler(lambda message: message.text == "‚ôªÔ∏è –£–∑–Ω–∞—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä –æ—Ç—Ö–æ–¥–æ–≤")
async def Marker(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —É—Ä–Ω—ã", reply_markup=Color_keyboard)
    await message.delete()


@dp.message_handler(lambda message: message.text in color_map.keys())
async def handle_color(message: types.Message):
    color = color_map[message.text]
    await message.answer(color)
    await message.delete()


@dp.message_handler(lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã")
async def Marker(message: types.Message):
    advice_list = [
        "1.–°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º—É—Å–æ—Ä, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å",
        "2.–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã",
        "3.–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –µ–∑–¥–∏—Ç–µ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ",
        "4.–°–∞–∂–∞–π—Ç–µ –¥–µ—Ä–µ–≤—å—è –∏ —Ü–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–µ–º —É—á–∞—Å—Ç–∫–µ",
        "5.–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å—É–º–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫",
    ]
    await message.answer("\n".join(advice_list))
    await message.delete()


@dp.message_handler(lambda message: message.text == "‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º")
async def send_random_value(message: types.Message):
    response = f'–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏, —É–∫–∞–∑–∞–≤ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–ø–∏—Å–∞–≤ –≤ –Ω–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ö –ø—Ä–∏–º–µ—Ä—É: " /q –ú–æ–∂–µ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –º—É—Å–æ—Ä?"'
    await message.answer(response)
    await message.delete()


@dp.message_handler(commands=["q"])
async def send_q_expert(message: types.Message):
    question = message.text.split(maxsplit=1)
    response = f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} : {question}"
    await bot.send_message("@ecologisticsexpert", response)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")


digit_map = {
    "1Ô∏è‚É£": "1",
    "2Ô∏è‚É£": "2",
    "3Ô∏è‚É£": "3",
    "4Ô∏è‚É£": "4",
    "5Ô∏è‚É£": "5",
    "6Ô∏è‚É£": "6",
    "7Ô∏è‚É£": "7",
}


@dp.message_handler(lambda message: message.text == "üî¢ –ö–æ–¥—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏")
async def send_random_value(message: types.Message):
    await message.answer(
        "‚ôªÔ∏è –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–¥—ã. "
        "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3-—Ö —Å—Ç—Ä–µ–ª–æ–∫ –≤ —Ñ–æ—Ä–º–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∞—è —Ç–∏–ø –ø–ª–∞—Å—Ç–∏–∫–∞.",
        reply_markup=Digit_keyboard,
    )
    await message.delete()


@dp.message_handler(lambda message: message.text in digit_map.keys())
async def handle_digit(message: types.Message):
    digit = digit_map[message.text]
    await message.answer(digit)
    await message.delete()


API_QA = "7e9f1b481689e9bb85a2119fe75ec481119a9ced"


def get_air_quality(city):
    # API endpoint URL
    url = f"https://api.waqi.info/feed/{city}/?token={API_QA}"
    # Make a request to the API
    response = requests.get(url)
    # Get the JSON response
    data = response.json()
    # Check if the request was successful
    if response.status_code == 200:
        # Get the AQI (air quality index)
        aqi = data["data"]["aqi"]
        # Get the pollutant with the highest concentration
        dominant_pollutant = data["data"]["dominentpol"]
        # Construct a message based on the AQI value
        if aqi <= 50:
            message = f"The air quality in {city} is good (AQI {aqi}). Enjoy your day!"
        elif aqi <= 100:
            message = f"The air quality in {city} is moderate (AQI {aqi}). It's still safe to be outside."
        elif aqi <= 150:
            message = f"The air quality in {city} is unhealthy for sensitive groups (AQI {aqi}). Limit outdoor activities."
        elif aqi <= 200:
            message = f"The air quality in {city} is unhealthy (AQI {aqi}). Consider staying indoors."
        elif aqi <= 300:
            message = f"The air quality in {city} is very unhealthy (AQI {aqi}). Stay indoors and avoid all outdoor activities."
        else:
            message = f"The air quality in {city} is hazardous (AQI {aqi}). Please stay indoors."
        # Add information about the dominant pollutant to the message
        message += f"\n\nThe dominant pollutant is {dominant_pollutant}."
    else:
        message = f"Sorry, we could not retrieve air quality data for {city}."
    return message


@dp.message_handler(lambda message: message.text == "–£–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞")
async def msg_air_quality(message: types.Message):
    response_message = (
        "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞.\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: Astana"
    )
    await message.answer(response_message)


@dp.message_handler(commands=["air"])
async def cmd_air_quality(message: types.Message):
    if len(message.text.split()) > 1:
        city = message.text.split(maxsplit=1)[1]
        response_message = get_air_quality(city)
        await message.answer(response_message)
    else:
        response_message = (
            "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞.\n–ù–∞–ø—Ä–∏–º–µ—Ä: Astana"
        )
        await message.answer(response_message)


API_Yan = "408bfa84-ab2e-4934-8e21-e2cc719dc1c7"


@dp.message_handler(commands=["nearest"])
async def handle_nearest_command(message: types.Message):
    location = message.location
    if location is None:
        await message.reply("Please share your location to use this command")
        return

    latitude = location.latitude
    longitude = location.longitude

    async with aiohttp.ClientSession() as session:
        url = f"https://search-maps.yandex.ru/v1/?apikey={API_Yan}&type=biz&text=–ø—Ä–∏–µ–º –º–∞–∫—É–ª–∞—Ç—É—Ä—ã&ll={longitude},{latitude}"
        async with session.get(url) as resp:
            response_json = await resp.json()

            points = response_json["features"]
            if len(points) == 0:
                await message.reply("There are no recycling points nearby")
            else:
                result = ""
                for point in points:
                    name = point["properties"]["name"]
                    address = point["properties"]["address"]
                    distance = int(point["properties"]["Distance"])
                    result += f"{name} ({distance} meters)\n{address}\n"

                await message.reply(result)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

# @dp.message_handler(lambda message: message.text == "–£–∑–Ω–∞—Ç—å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏")
# async def Marker(message: types.Message):
#     response = f''
#     await message.answer(response)
